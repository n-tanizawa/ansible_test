[インベントリの分割]
一般的に以下のようなカテゴリで分割する。

・運用環境
「本番環境」や「ステージング環境」「開発環境」といったように、サービスレベルに応じて異なるセキュリティゾーン
を設けたグループ
・ロケーション
「東京」「大阪」または「米国」「欧州」など、ターゲットノードの物理的なロケーションによって配置されるグループ
・サーバ種別
「Webサーバ」「アプリケーションサーバ」「データベースサーバ」など、ターゲットノードの役割ごとのグループ
この種別には、インストールするミドルウェアだけではなく、ネットワーク機器や、OSディストリビューションの違い
などの概念も含む。

■ 運用環境ごとのインベントリ

C:.
│  production.ini
│  staging.ini
│
├─group_vars
│      jp_servers.yml
│      web_servers.yml
│
├─host_vars
│      jp-web01.yml
│      jp-web02.yml
│
└─プレイブックのベストプラクティス
        インベントリの分割.txt

運用環境ごとにインベントリを作成した場合は、「ロケーション」や「サーバ種別」のカテゴリグループごとの設定は、
インベントリの中で調整する。たとえば、プレイブック内のターゲット(targets)にjp_serversのグループを指定した
場合でも、group_vars/web_servers.ymlにグループ変数を定義しておくと、web_serversに属したターゲットノード
には、web_servers.ymlに対して、同一の変数名を利用しないよう注意する必要がある。
たとえば、web_server.ymlにはHTTPプロセスに必要なオプションなど、Webサーバグループのみに適用する変数を定義する。
一方、jp_servers.ymlには、NTPの問い合わせた先サーバの指定など、日本のサーバグループ固有の変数を定義する。
そして、ロケーションやサーバー種別に関係がない運用環境全体に定義する変数は、all.ymlに定義する。
all.ymlには、OS共通のkeymapやモジュールなどを設定する。

## 全ての本番環境のWebサーバに適用する場合
$ ansible-playbook -i production.ini web_deploy.yml
## 日本のWebサーバのみに適用する場合
$ ansible-playbook -i production.ini web_deploy.yml -l jp_servers

■ 階層化したインベントリ
運用環境ごとのインベントリ構成は、あくまで運用環境ごとの設定が同じことを前提とし、変数の切り替えが少ない場合を
想定したディレクトリ構成。つまり、運用環境ごとのインベントリ構成で対応すると、どの運用環境でもgroup_varsに
定義した変数が同じように展開される。しかしながら、実際の運用では運用環境ごとにセキュリティ規則が異なり、使用
するポート番号や各テンプレートの配置場所などが異なる場合も多い。このような場合には、ディレクトリ構造を階層化
してインベントリの変数を定義することで対応が可能。
Ansibleではインベントリディレクトリ配下に置かれたファイルではなく、階層化されたディレクトリもインベントリと
して指定できる。したがって、あらかじめ運用環境ごとにディレクトリを分割し、個別の変数を切り替えることで、環境
ごとの変数切り替えが実現できる。

C:\USERS\TNCOC\デスクトップ\ANSIBLE\ANSIBLE_TEST\EFFECTIVE_ANSIBLE\SEC7
├─inventory
│  └─production
│      ├─group_vars
│      │      jp_servers.yml
│      │      web_servers.yml
│      │
│      ├─hosts
│      └─host_vars
│              jp_servers.yml
│              web_servers.yml

各運用環境のディレクトリ配下にインベントリを作成した場合は、Ansibleによって、インベントリのある階層にある
host_varsおよびgroup_varsが読み込まれる。Ansible実行時も階層化したインベントリディレクトリにあるインベン
トリ(例ではhosts)を指定するだけで、劇的に各環境のホスト変数、グループ変数が読み込まれる

## 本番環境のWebサーバに適用する場合
$ ansible-playbook -i inventories/production/hosts web_deploy.yml
## 日本にあるステージング環境のデータベースサーバのみに適用する場合
$ ansible-playbook -i inventories/staging/hosts web_deploy.yml -l jp_servers