[大規模なプレイブックディレクトリ構成]
管理が多岐に分かれるプレイブックでは、ディレクトリ構成がプレイブックやロールを安定的に運用するための一つの
施策になる。このパターンは、各システムコンポーネントに対して、構築作業だけでなく日々の運用作業だけでなく、
日々の運用作業などの処理タスクをプレイブックにまとめる場合などに活用できる。
このプレイブック構成では、以下のような複数コンポーネントあるいは複数タスクプロセスを含む場合に有効。

・クラウドプラットフォームの運用
・監視サービスの統合運用管理
・Webサービスの統合運用管理

ロールのtasksディレクトリでは、main.ymlが動的に読み込まれるが、運用や構成タスクが増えるとロール自体の肥大化
を回避する必要が出てくる。そのため、あらかじめタスクプロセスごとにファイルを分割しておき、どのような運用にも
柔軟に対応できるように分割すると便利。たとえば構築作業であれば、ロールのmain.ymlから複数のタスクプロセスを
include_tasksモジュールを利用して呼び出すことができる。

・大規模なプレイブックディレクトリ構成例

./sec7/
├── inventory
│    ├── production.ini
│    └── ...
├── group_vars
├── host_vars
│    ├── web_servers.yml
│    ├── db_servers.yml
│    └── 
├── cluster_config.yml ## 環境に合わせて変数値のみを構成するプレイブック
├── site.yml
└── roles 
   ├──── nginx
   │      ├── tasks
   │      │   ├── change_config.yml
   │      │   ├── check_install.yml 
   │      │   ├── check_status.yml
   │      │   ├── install.yml
   │      │   ├── delete.yml
   │      │   ├── start_service.yml
   │      │   ├── stop_service.yml
   │      │   └── ...
   │      └── ...
   └──── mysql

しかし、すべてのタスクプロセスのファイルを条件分岐やタグ制御によって、ロールのタスクディレクトリにある
main.ymlから制御すると、本来呼ばれるべきではないタスクプロセスを呼び出してしまう恐れなどもあり、かえって
運用が煩雑になる可能性がある。よって、1つのロールのタスクプロセスが多くなった場合は、main.ymlを利用せずに
直接プレイブックからinclude_roleモジュールを使って特定のタスクプロセスを呼び出し、1つのプレイブック内で
処理が完結するように指定することも大規模なプレイブックの管理方法の一つ。

・ロールのタスクプロセスをハンドリングする例
---
- name: Create Nginx stop_service 
  hosts: web_servers
  become: yes
  tasks:
  - name: Initialize OS settings
      include_role:
        name: common
        tasks_from: setup
        vars_from: linux_centos

  - name: Check OS check_status
      include_role: 
        name: common
        tasks_from: check_status

  - name: Pre tasks for nginx
    include_role:
      name: nginx
      tasks_from: pre_install

また、大規模なプレイブックを作成すると環境の際が出てしまう頻度も高まる。その場合は、事前に環境をチェックして
特定の変数を書き換えるようなセットアッププレイブック(cluster_config.ymlなど)を実行した後に、環境の変更を
行うメインのプレイブックを実行するとよい。こういった手段は、多く商用プロダクト管理でも活用されている方式である。
このように、ロール分割してもタスクが多い環境では、汎用性の高いロールのタスクプロセスをまとめ、個別のプレイ
ブックから呼び出すことにより、柔軟性の高いプレイブックを構築することができる。ここまで1つのプレイブックで操作
できると、プレイブック自体が環境を操作できる1つのコマンドのような動作をする。


