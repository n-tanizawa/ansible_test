[中規模なプレイブックディレクトリ構成]
ロールを利用した典型的パターンを利用する構成。
このパターンは、アプリケーションデプロイメントやオーケストレーション作業のような、複数のシステムコンポーネント
に対して単一のタスクプロセスを適用する場合に有効。特に、運用作業よりも構築作業に伴うインストールやセットアップ
の自動化に利用される。
このプレイブック構成では、以下のような複数コンポーネント作業を対象とする場合などに有効。

・ミドルウェアの一括インストール作業
・アプリケーション実行環境の構築作業
・OSの初期セットアップ作業
・セットアップ確認テスト作業
・クラウドリソースのブートストラッピング作業

・中規模なプレイブックディレクトリ構成例

./sec7/
├── production.ini
├── group_vars
├── host_vars
│    ├── web_servers.yml
│    ├── db_servers.yml
│    └── site.yml
└── roles 
   └──── nginx
          ├── defaulst
          │ └── main.yml
          ├── templates
          │ └── nginx.conf.j2
          └── tasks
            └── main.yml

ロールを活用した場合、プレイ定義方法によってプレイブックを分割する方法が分かれる。
プレイとは「hosts」ディレクティブによって接続先を変更することを意味する。もし、接続先の変更が少なければ
1つのプレイブックで構成できるが、変更が複数発生する場合や、運用上明示的に接続先を切り替える場合は、以下の
単位でプレイブックファイルの分割を検討する。この際、ロールは共通化しておき、接続先によってプレイブック内で
デプロイ対象コンポーネントやアップデート対象操作を制限するのが良い。

・処理単位のファイル分割
特定の処理単位で事前にプレイブックを分割しておく。この分割単位を検討することで、実行すべきタスクプロセスが
増えても、容易に拡張できるようになる。たとえば、cluster_deploy.yml、cluster_update.ymlというシステム全体
の処理単位でプレイブックを分割する。

・接続先単位のファイル分割
接続先単位でファイルを分割しておくことにより、インベントリとの組み合わせによって、接続対象への処理が明確化する。
たとえば、接続対象に合わせてweb_deploy.yml、db_deploy.ymlというファイルを作成する。

これらの分割単位は、それぞれ規模によって一長一短がある。処理単位で分ける場合は、接続先の切り替えが多いほど、
処理の依存性が複雑になる。また、接続先単位で分割すると、アップデートやチェックタスクなど、複数のタスクを実行
する場合はプレイブックの数をが増えてしまう。

