[プレイブックの分割]
インベントリとは対照的に、プレイブックの分割はターゲットノードの属性に関連せず、タスクのカテゴリによって
ファイルを分割する。タスクとは、自動化を行いたい対象である「システムコンポーネント(役割)」とその「運用タスク
プロセス」の2つのカテゴリに分類できる。

・システムコンポーネント(役割)
構築対象となるインフラリソース、ミドルウェアやアプリケーションなど、ロール(役割)で取り扱ってきたコンポーネント
の単位
・運用タスクプロセス
各コンポーネントの運用ライフサイクル(構築、復旧、監視、評価など)に応じて分割した単位

これらの分割範囲をどのように設計するのかによって、プレイブックの構成が設計できる。
「運用タスクプロセス」とは、各コンポーネントのインストール、設定、起動停止、状態チェック、クラスタ化、クラスタ
への追加/削除などの運用単位である。
大規模環境においてAnsibleのプレイブックで構築、運用するには、これらのカテゴリを意識して構成を組み立てていく
ことが重要。特にタスクが多いプレイブックではカテゴリごとにYAMLファイルを分割しなければ、タスク順序による定義
エラーを引き起こす可能性がある。したがって、適切に分割するためにカテゴリをあらかじめ決めておくのが良い。
また、ある程度のプレイブックのパターンを決めることにより、1つのファイルに定義されるタスク数が限定され、共有
する場合もプレイブックの見通しが良くなる。

どのパターンにおいても注意すべきことは、プレイブックもインベントリのディレクトリ構成と同様に、細かく分類すれ
ばするほど柔軟性は高まるが、可読性は低下することである。したがって、自動化対象の実行範囲やプレイブックを共有
するメンバのスキルなども考慮に入れたうえで、適切なプレイブックの配置を設計する。

■ 小規模なプレイブックディレクトリ構成
1つのプレイブックで特定のタスクを取り扱う構成。これは自動化対象が小規模な時だけでなく、システムコンポーネント
とタスクプロセスのどちらもが単一の作業の場合に有効。例えば、OSのセキュリティパッチの適用や、すでにクラスタ化
されているミドルウェアのメンバ追加作業といった単一作業など。この場合、OSやWebサーバなど単体のコンポーネントに
対して、1つのプレイブックでセキュリティパッチ適用前の事前タスク、実際にパッチを適用するタスク、パッチ適用後の
確認タスクなどの実行する。
このプレイブック構成では、以下のような単体作業を対象とする場合に有効。

・システムログの退避作業
・サマリーレポート出力作業
・セキュリティバッチ適用作業
・データのバックアップ作業
・クラスタへのメンバ追加

この構成ではあえてロールを定義せずとも、単体で処理が終わるプレイブックを複数用意しておくことにより定常作業を
実行する。

・小規模なプレイブックのディレクトリ構成例

./sec7/
├── production.ini
├── group_vars
├── host_vars
├── backup_logs.yml  ## ログをバックアップするだけのプレイブック
├── update_security_patch.yml ## セキュリティパッチを追加するだけのプレイブック
└── ...

■ 中規模なプレイブックディレクトリ構成
ロールを利用した典型的パターンを利用する構成。
このパターンは、アプリケーションデプロイメントやオーケストレーション作業のような、複数のシステムコンポーネント
に対して単一のタスクプロセスを適用する場合に有効。特に、運用作業よりも構築作業に伴うインストールやセットアップ
の自動化に利用される。
このプレイブック構成では、以下のような複数コンポーネント作業を対象とする場合などに有効。

・ミドルウェアの一括インストール作業
・アプリケーション実行環境の構築作業
・OSの初期セットアップ作業
・セットアップ確認テスト作業
・クラウドリソースのブートストラッピング作業

・中規模なプレイブックディレクトリ構成例

./sec7/
├── production.ini
├── group_vars
├── host_vars
│    ├── web_servers.yml
│    ├── db_servers.yml
│    └── site.yml
└── roles 
   └──── nginx
          ├── defaulst
          │ └── main.yml
          ├── templates
          │ └── nginx.conf.j2
          └── tasks
            └── main.yml

ロールを活用した場合、プレイ定義方法によってプレイブックを分割する方法が分かれる。
プレイとは「hosts」ディレクティブによって接続先を変更することを意味する。もし、接続先の変更が少なければ
1つのプレイブックで構成できるが、変更が複数発生する場合や、運用上明示的に接続先を切り替える場合は、以下の
単位でプレイブックファイルの分割を検討する。この際、ロールは共通化しておき、接続先によってプレイブック内で
デプロイ対象コンポーネントやアップデート対象操作を制限するのが良い。

・処理単位のファイル分割
特定の処理単位で事前にプレイブックを分割しておく。この分割単位を検討することで、実行すべきタスクプロセスが
増えても、容易に拡張できるようになる。たとえば、cluster_deploy.yml、cluster_update.ymlというシステム全体
の処理単位でプレイブックを分割する。

・接続先単位のファイル分割
接続先単位でファイルを分割しておくことにより、インベントリとの組み合わせによって、接続対象への処理が明確化する。
たとえば、接続対象に合わせてweb_deploy.yml、db_deploy.ymlというファイルを作成する。

これらの分割単位は、それぞれ規模によって一長一短がある。処理単位で分ける場合は、接続先の切り替えが多いほど、
処理の依存性が複雑になる。また、接続先単位で分割すると、アップデートやチェックタスクなど、複数のタスクを実行
する場合はプレイブックの数をが増えてしまう。

■ 大規模なプレイブックディレクトリ構成
管理が多岐に分かれるプレイブックでは、ディレクトリ構成がプレイブックやロールを安定的に運用するための一つの
施策になる。このパターンは、各システムコンポーネントに対して、構築作業だけでなく日々の運用作業だけでなく、
日々の運用作業などの処理タスクをプレイブックにまとめる場合などに活用できる。
このプレイブック構成では、以下のような複数コンポーネントあるいは複数タスクプロセスを含む場合に有効。

・クラウドプラットフォームの運用
・監視サービスの統合運用管理
・Webサービスの統合運用管理

ロールのtasksディレクトリでは、main.ymlが動的に読み込まれるが、運用や構成タスクが増えるとロール自体の肥大化
を回避する必要が出てくる。そのため、あらかじめタスクプロセスごとにファイルを分割しておき、どのような運用にも
柔軟に対応できるように分割すると便利。たとえば構築作業であれば、ロールのmain.ymlから複数のタスクプロセスを
include_tasksモジュールを利用して呼び出すことができる。

・大規模なプレイブックディレクトリ構成例

./sec7/
├── inventory
│    ├── production.ini
│    └── ...
├── group_vars
├── host_vars
│    ├── web_servers.yml
│    ├── db_servers.yml
│    └── 
├── cluster_config.yml ## 環境に合わせて変数値のみを構成するプレイブック
├── site.yml
└── roles 
   ├──── nginx
   │      ├── tasks
   │      │   ├── change_config.yml
   │      │   ├── check_install.yml 
   │      │   ├── check_status.yml
   │      │   ├── install.yml
   │      │   ├── delete.yml
   │      │   ├── start_service.yml
   │      │   ├── stop_service.yml
   │      │   └── ...
   │      └── ...
   └──── mysql

しかし、すべてのタスクプロセスのファイルを条件分岐やタグ制御によって、ロールのタスクディレクトリにある
main.ymlから制御すると、本来呼ばれるべきではないタスクプロセスを呼び出してしまう恐れなどもあり、かえって
運用が煩雑になる可能性がある。よって、1つのロールのタスクプロセスが多くなった場合は、main.ymlを利用せずに
直接プレイブックからinclude_roleモジュールを使って特定のタスクプロセスを呼び出し、1つのプレイブック内で
処理が完結するように指定することも大規模なプレイブックの管理方法の一つ。

・ロールのタスクプロセスをハンドリングする例
---
- name: Create Nginx stop_service 
  hosts: web_servers
  become: yes
  tasks:
  - name: Initialize OS settings
      include_role:
        name: common
        tasks_from: setup
        vars_from: linux_centos

  - name: Check OS check_status
      include_role: 
        name: common
        tasks_from: check_status

  - name: Pre tasks for nginx
    include_role:
      name: nginx
      tasks_from: pre_install

また、大規模なプレイブックを作成すると環境の際が出てしまう頻度も高まる。その場合は、事前に環境をチェックして
特定の変数を書き換えるようなセットアッププレイブック(cluster_config.ymlなど)を実行した後に、環境の変更を
行うメインのプレイブックを実行するとよい。こういった手段は、多く商用プロダクト管理でも活用されている方式である。
このように、ロール分割してもタスクが多い環境では、汎用性の高いロールのタスクプロセスをまとめ、個別のプレイ
ブックから呼び出すことにより、柔軟性の高いプレイブックを構築することができる。ここまで1つのプレイブックで操作
できると、プレイブック自体が環境を操作できる1つのコマンドのような動作をする。

