[SSHのチューニング]
Ansibleの接続は、SSHを利用しているため、SSHの接続によってパフォーマンスが大きく左右される。
特に、OpenSSHのバージョンが5.5以下の場合は、Pythonのparamikoライブラリが使用される。paramikoライブラリでは、
タスク実行ごとにSSH接続を行う。その結果タスクの実行速度が遅延することがあり、全体のパフォーマンスに影響を
及ぼす。SSHの接続に関するパフォーマンスを解決するために「多重接続機能」と「パイプライン」がある。

■ 多重接続機能
毎回タスク上のコマンドを実行するたびに、SSHコネクションを確立していると、どうしてもプレイブック全体のオーバー
ヘッドが大きくなってしまう。そこでOpenSSHの多重接続機能を利用することによって、接続の負荷を軽減する。
この機能では、初めに接続した制御用のTCPセッション(マスタコネクション)をUnixドメインソケットとして作成し、
そのセッションを再利用して複数の接続を束ねることができる。本来であれば、TCPの同時接続数が制限されている環境に
おいて複数SSHセッションを集約するなど、複数の接続を1つのコネクションに束ねるための機能ですが、すでに接続認証
が完了しているセッションを共有するため、SSH接続処理にかかる時間を削減する。
多重接続機能を設定するためのオプションは以下の3点である。

・SSHの多重接続設定
オプション      オプション内容              値　　      設定内容
ControlMaster  多重化接続方法              yes        ターゲットノードに接続し、Unixドメインソケットを
                                                     作成する(マスタセッション)
                                          no         ControlPathで指定したソケットを利用する
                                          auto       ソケットがなければ作成し、作成していればそれを
                                                     利用する
ControlPath    多重接続のソケットの保存場所 保存先パス  ソケットのパスを指定する。パスには以下を利用して
                                                     一意にパスを決める
                                                     %l: ローカルホスト名
                                                     %h: ターゲットノードホスト名
                                                     %n: コマンドライン上のホスト名
                                                     %p: 接続先ポート番号
                                                     %r: ターゲットノード先のログインユーザ名
                                                     %u: ログインのユーザ名
                                          none       接続の共有を禁止する
ControlPersist 多重化接続の永続化設定       yes        永続的にコネクションを残す
                                          時間       マスタセッションのタイムアウト期間を設定

これらは通常、SSHの設定($HOME/.ssh/ssh_config)や接続時のオプションで指定するが、OpenSSHのバージョン
5.6以上(ControlPersist追加)であれば、Ansibleではデフォルトで多重接続機能を利用するように設定される。
そのため、特に設定を行わずともこの機能を利用することができる。明示的に設定を行う場合は、ansible.cfgの
[ssh_connection]セクションに設定する。

・多重接続設定の設定(ansible.cfg)
[defaults]
...
[ssh_connection]
## Ansibleのデフォルト値
ssh_args = -o ControlMaster=auto -o ControlPersist=60s
## /home/ansible/.ansible/cp/配下
control_path = %(directory)s/ansible-ssh-%%h-%%p-%%r

デフォルトではマスタセッションはControlPersistオプションによって、60秒で自動的に削除されるようになって
いるが、長く伸ばすことも可能。ただし、Unixドメインソケットへのアクセス権限を他のユーザに与えないようにする。
誰でも既存コネクションを利用できるようになるため、セキュリティ上のリスクを伴う。
さらにControlPathは、108文字までの制限があるため、ホスト名などをControlPathに含むと、クラウドリソースの
ホスト名などで制限文字を超え、「ControlPath too long」のエラーが出る。したがって、ControlPathを特定の
日時にするなど、設定時は注意が必要。

■ パイプライン
Ansibleの処理の実行は、実行スクリプトをターゲットノードに転送、ターゲットノード側でスクリプトの実行、
スクリプトの削除という手順で行われる。しかし、これらの転送、実行、削除はそれぞれSSH接続を行っているため、
作業としては非効率である。パイプライン処理は、実際のファイル転送を行わずにAnsibleモジュールを実行すること
により、ターゲットノード上でモジュールを実行するため、実行スクリプトの転送や削除に必要なネットワーク接続数
を減らす。仕組みとしては、コントロールノード上の実行スクリプトを、ターゲットノードに対して直接SSH経由で実行
することによって、処理を短縮化する。

実際の設定は、ansible.cfgのssh_connectionセクションにあるpipeliningというキーを有効化することで利用できる。

・多重接続設定の設定(ansible.cfg)
[defaults]
...
[ssh_connection]
pipelining = True

パイプライン機能は直接スクリプトを実行しているため、ターゲットノード側でsudoを利用する場合はTTYエラーが出て
しまう。よって、あらかじめターゲットノード側の/etc/sudoersの設定で、requirettyを無効化する必要がある。
多くのサーバがある場合は設定に手間がかかるだけでなく、脆弱性の面でも注意が必要。

・requirettyの無効化例: /etc/sudoers.d/ansible
Defaults:ansible

!requretty