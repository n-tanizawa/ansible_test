[Docker環境におけるAnsibleの利用]
Docker:コンテナの管理及びコンテナイメージの管理を行うツール
Dockerコンテナは、これまでの仮想マシンの用途とは大きく異なり、以下のように軽量かつポータビリティといった特徴がある。

・標準化
アプリケーションが依存するライブラリや設定ファイルを素早く展開し、APIを活用することでテストやデプロイ作業を統一できる
・ポータビリティ
開発環境、本番環境、またオンプレミス環境からパブリッククラウド上への移行など、インフラ環境に依存せず実行できる
・リソースの有効活用
仮想マシンよりもオーバーヘッドが低く、サーバリソースを最大限活用できる。

これらの特徴を活かし、動的にコンテナをデプロイすることにより、アジリティの高いサービスを提供することがDockerを
利用する最大の目的である。さらに、Ansibleと連携してコンテナのプロビジョニングを自動化できるようになると、プレイブック
の作成だけでコンテナの管理が可能となり、迅速かつ安全なサービス展開を行えるようになる。

Docker環境では、コンテナはコンテナイメージと呼ばれる軽量のファイル形式で取り扱われる。
そして、サービスに合わせて自由にコンテナの実行や破棄、またコンテナイメージの作成が行える。
これはDocker独自のプロビジョニング機能であり、コマンド操作によるコンテナ管理や、定義ファイルを活用した動的なコンテナ
イメージを作成できる。つまり、Ansibleの機能を活用せずとも、Dockerだけでコンテナのプロビジョニングが完結する。
また、近年ではKubernatesをはじめとするコンテナオーケストレーションを活用したコンテナの管理が主流。

Docker環境における、Ansibleの利用範囲は主に以下の2点である。
(1)コンテナのプロビジョニング
コンテナの実行や停止、コンテナイメージの作成など、通常Dockerコマンドを利用して操作するコンテナのライフサイクル管理
の自動化
(2)コンテナの構成管理
既存の構成管理のように稼働中のコンテナに対して、アプリケーションのデプロイや変更操作の自動化

Dockerはクライアント/サーバ型のシステムであり、コンテナのプロビジョニングで見られるコンテナのライフサイクルの管理は、
CLIコマンドやその他のクライアントツールからサーバ側のDocker Remote APIを経由して操作する。
コンテナオーケストレーションでは、こうしたAPIを活用して構成管理を行っている。ただし、コンテナオーケストレーションが
行うコンテナ管理は、汎用的なオペレーションを基本としてコンテナの障害検知や自動復旧を行う。
ここでいう汎用的なオペレーションとは、Immutable Infrastructureの概念を前提とした運用管理であり、コンテナ自体を作り
直すことによって元の状態に復旧する。

Immutable Infrastructure:リソースを使い捨てのコンポーネントとして取り扱い、リソースの状態管理を常に行わない運用方法

つまり、コンテナオーケストレーションそのものは、コンテナの状態管理を行わないステートレスなプロセスの実装を得意とする。
しかし、データベースの運用のように、アプリケーションからの接続状態を管理しなければならないステートレスなプロセスも数
多く存在する。こうした、ステートレスなプロセス運用はImmutable Infrastructureが適用できないため、属人的な運用に委ね
られがちである。Ansibleでは、こうした独自の運用ノウハウをコード化し、運用工数を下げることが求められる。
これは、コンテナのプロビジョニングやコンテナの構成管理にも同じことが言え、コンテナのプロビジョニングもコンテナ
オーケストレーションが提供する機能だけで十分な場合はそれに委ねるのが良い。一方で、Immutable Infrastructureが
適用できないようなコンテナの構成管理に関しては運用をコード化することが求められる。

