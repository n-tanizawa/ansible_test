[WinRM(Windows Remote Management)]
Windowsリモート管理(WinRM)は、リモート管理用のWS-Managementプロトコルを実装したサービスである。
WMIが利用するDCOM接続ではなく、SOAP(HTTP及びHTTPS)ベースのWS-Managementプロトコル経由でターゲットノードとの
セッションを確立する。また、このサービスを使用することにより、WMIデータへのアクセスとイベントの収集が可能。

[PowerShell]
Windows用に開発されたオブジェクト指向のコマンドライン方式シェルスクリプト言語。
今までマウスオペレーションでしかできなかったGUI操作を、CUIの命令セット(コマンドレット)として提供し、スクリプトから
高機能なシステム管理操作を実現できる。

[Windows Management Instrumentation(WMI)]
WMIは、コマンドラインツールやスクリプト言語などからWindowsの設定情報やコンピュータの状態などにアクセスするための
標準仕様。ハードウェアやソフトウェア情報だけでなく、プロセスやサービスユーザー、グループといった、システムに関する
様々なインベントリ情報を取得・収集できる。
WMIにはCIMリポジトリとCIMオブジェクトマネージャー(CIMOM)が含まれている。
CIMリポジトリとは、すべてのメーカープロダクトを統一して取り扱えるオブジェクトが定義されているデータベースである。
一方、CMIオブジェクトマネージャーは、リポジトリのオブジェクト収集と操作を行い、各プロバイダからシステムを収集する。

[pywinrm]
pywinrmとは、WinRMサービスに接続するためのPythonクライアントライブラリである。
WinRM Connectionプラグインの中で使われており、このライブラリを利用することによって、Windowsターゲットノードに対して、
WMIデータの取得やPowerShellスクリプトの実行、バッチ処理などの操作を実行できる。

Ansibleでは、上記の接続コンポーネントの組み合わせによって、Windowsの管理を実現している。
これらのコンポーネントのうち、WMI、WinRM、PowerShellは、Windowsのシステム管理フレームワークである
Windows Management Framework(WMF)に含まれるコンポーネント群である。

まず、コントロールノードは、モジュールの中にあるPowerShell実行スクリプト(.ps1)をターゲットノードに送信する。
この際、接続するConnectionプラグインに、pywinrmが利用されている。また、実行スクリプトは、接続ユーザーの
AppData配下に配置される。(例:C:\Users\Ansible\AppData\Local\Temp\)一方、ターゲットノード側では、PowerShell
スクリプトを利用してWMIデータの取得や実際のリソース変更、プロセス管理などを行う。
Linux管理操作では、Pythonの実行スクリプトがターゲットノード側で実行されるところを、WindowsではPowerShellの
スクリプトを用いている。ただし、rawモジュールなどは、直接PowerShellのスクリプトのコマンドをWinRM経由で実行している。
このように、AnsibleがWindowsと接続するときには、ターゲットノード側のアーキテクチャに合わせて、Connectionプラグインを
切り替えている。

