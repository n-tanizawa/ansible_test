[タスクの実行順序]
ロールを含め、基本的にプレイ内のタスクの実行順序は、上から記載した順番通りに実行が行われる。
厳密には下記のような順序で処理が実行される。

(1)変数の読み込み
(2)ファクト収集
(3)事前タスク(pre_tasks)の実行
(4)事前タスク(pre_tasks)の実行による通知ハンドラ処理
(5)ロールの実行
(6)タスクの実行
(7)ロールやタスクの実行による通知ハンドラ処理
(8)事後タスク(post_tasks)の実行
(9)事後タスク(post_tasks)の実行による通知ハンドラ処理

pre_tasks、post_tasksディレクティブはタスクの前後に行われるタスクを定義する。
単純なアプリケーションデプロイメントやミドルウェアの構成変更であれば利用する必要はないが、システムレイヤを跨ぐ
オーケストレーションなど、1つのプレイブックでシステム全体構成を取り扱う場合などにはとても有効なディレクティブである。

・pre_tasks/post_tasksの例
---
- hosts: localhost
  gather_facts: false

  pre_tasks:
    - name: Updated packages
      apt:
        Update_cache: yes
      notify: Apt Updated

    - name: Upgrade the virtualenv
      pip:
        requirements: /my_app/requirements.txt
        virtualenv: /my_app/venv

  roles:
    - common
    - nginx
    - mysql
    - my_app

  tasks:
    - name: Sync database
      shell: /my_app/venv/bin/python /my_app/code/webapp/manage.py --migrate --noinput
      notify: Check synced data

  handlers:
    - name: Apt Updated
      debug:
      msg: "Packages are updated. Check the processes."

    - name: Check synced data
      shell: /my_app/venv/bin/python /my_app/code/webapp/data_check.py

  post_tasks:
    - name: Reboot System
      command: /sbin/shutdown -r now

pre_tasksやpost_tasksを利用する場合には、それぞれのハンドラの実行順序を意識する。