[ロールの概要]
1つのプレイブックに多くのタスクを定義してしまうと、プレイブックの管理が煩雑になってしまう。
それを避けるために定義されたものがロールである。ロールはプレイブックを分割するためのコンポーネントであり、
Tasksセクションや、Varsセクションを別のファイルに分けて管理する仕組みである。

■ ロールの構造
ロールを利用する場合は、Ansibleが認識できるディレクトリ構造を作成し、ファイルを配置することが必要。
さらに、ディレクトリ配下のファイルは、main.ymlが固定で読み込まれる仕様になっている。
それ以外の名前のファイルは、個別にincludeで読み込まなければ動的には読み込まれない。

C:\USERS\TNCOC\デスクトップ\ANSIBLE\ANSIBLE_TEST\EFFECTIVE_ANSIBLE\SEC3\ROLES
├─common                ## ロール名のディレクトリ
│  ├─defaults           ## [defaults] ロール内で利用するデフォルト変数のファイルを配置
│  │      main.yml      ## デフォルト変数の定義
│  │      
│  ├─files              ## [files] コピーや、スクリプトモジュールで利用するファイルを配置
│  │      XXX.sh        ## ターゲットノードに配置するスクリプト
│  │      XXX.txt       ## ターゲットノードに配置するファイル
│  │      
│  ├─handlers           ## [handlers] Handlersセクションを記載したファイルを配置
│  │      main.yml      ## ハンドラ定義
│  │
│  ├─meta               ## [meta] ロール間の依存関係を記載したファイルを配置
│  │      main.yml      ## ロール同士の依存関係定義
│  │
│  ├─tasks              ## [tasks] Tasksセクションを記載したファイル
│  │      main.yml      ## タスク処理を定義
│  │
│  ├─templates          ## [templates] テンプレートモジュールで利用するテンプレートを配置
│  │      XXX.conf.j2   ## jinja2テンプレート  
│  │
│  └─vars               ## [vars] Varsセクションを記載したファイルを配置
│          main.yml     ## 変数を定義
│
└─mysql                 ## ロール名のディレクトリ
...(省略)...