[YAMLの基本]
YAMLとは、構造化データの表現方法であり、簡単に言うとデータ形式の一種。
YAMLは読みやすく、書きやすく、わかりやすいという特徴があり、プログラミング未経験者でもすぐに記述できる構文となっている。

・データ形式
データ形式は、インデントによって階層構造を示すコレクションと、それ以外のデータを示すスカラーを組み合わせてデータを表現する。
コレクションは、「シーケンス」「マッピング」と呼ばれる配列のデータ形式を持つ。

・表記方法
YAMLには、インデントと改行を利用して構造を表現するブロックスタイルと、{ }や[ ]などのJSONスタイルで構造を表現する
フロースタイルがある。プレイブックでは、両方の記載方法が利用できるが、通常は可読性の高いブロックスタイルを利用する。

・YAMLの表記例
## ブロックスタイル
tasks:
    - name: Create Group 
      group: name=management
    - name: Create User 
      user: name=ansible

## フロースタイル　
tasks[ {name: Create Group, group: name=management},{name: Create User, user= name=ansible} ]

・コメント
コメントは#から行末までをコメントとしてみなす。なお、範囲指定のコメント表記はYAMLにはない。

・開始、終了表記
YAMLファイルは、はじめに「---」から開始し、「...」で定義分を終了する構造。
したがって、「...」以降は本来YAMLとして解釈されない。これらがなくてもプレイブックはYAMLを前提として解釈されるため、
問題はないが、開始には「---」を付けるのが良い。

・コレクションの書式
コレクションとは値を入れるためのデータ形式であり、YAMLで配列を「シーケンス」、連想配列（ハッシュ）を「マッピング」と
呼んでいる。Ansibleのドキュメントでは「シーケンス」のことを「リスト」、「マッピング」のことを「ディクショナリ」と
記載している。

・シーケンス書式例
先頭に「-」を付けて値を列挙することにより、配列やリストを表現する。

- ## 値がない行の後にインデントとハイフンを使うと入れ子構造になる
  - Kansai
  - Kyushu
  -
    - Tokyo
    - Kanagawa
    - Chiba

・マッピング書式例
fruit: ## この行には値を代入できない
  apple: リンゴ
  orange: みかん
  lemon: レモン

コレクションはスペースでインデントすることにより、ネストを表現することが可能。
ただし、マッピングでネストを利用する場合は、ネストした後の配列が上位のKeyの値となるため、Keyと同じ行で値を
代入することはできない。また、Ansibleでは、シーケンスとマッピングが単体で利用されることはなく、組み合わせて
利用される。

・コレクションのデータ形式
- host: all
  vars: #マッピングがネストされるので、値は入らない
    ntp_conf: /tmp/ntp.conf 

  tasks: #シーケンスがネストされるので、値は入らない
(1)
↑  - name: Install ntp
|    yum: name=ntp state=installed
|
|  - name: Configure ntp
|    copy: src={{ ntp_conf }} dest= /etc/ntp_conf
|   (2)
|  -↑name: Run and Enable ntp
↓   ↓service: name=ntpd state=running enabled=yes
(1)マッピングの中にシーケンスをネスト
(2)シーケンスの中にマッピングをネスト