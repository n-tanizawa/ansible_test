[変数の参照]
YAMLの書式では変数の定義はできるが、変数の参照はできない。
よって、Ansibleでは変数を参照するために、Python用のテンプレートエンジンのjinja2を利用する。
jinja2では、ランタイム時にテンプレート内にある変数を置換し、環境に応じたテキストファイルを作成する。
Ansibleでも、この仕組みを利用して、プレイブック内の変数を読み込んだり、テンプレートから設定ファイルを作成したりする。
通常テンプレートは拡張子を.j2とするファイルで作成する。

jinja2では、以下の2つの可変フォーマットによって変数を取り扱う。

・ {{ ... }} 変数値の結果を表示するタグ
・ {% ... %} 変数に対する制御構文を記述するタグ

■ マッピングの参照
マッピングは、変数名（Key）を利用して値にアクセスする。ネストした変数名に関しては「.」もしくは「[]」を並べて
記述することにより、下位層の値にアクセスできる。ただし「[]」を利用した場合は、変数名を「""」もしくは「''」で
囲む必要がある。また、参照先が上位の変数名の場合は、マッピング形式のまま参照が可能。

・マッピングの参照例
vars:
  ens160:
    ipv4:
      address: "192.168.101.1"
      broadcast: "192.168.101.255"
      netmask: "255.255.255.0"

{{ ens160.ipv4.address }}
## "ens160.ipv4.address": "192.168.101.1"

{{ ens160['ipv4']['address'] }}
## "ens160.ipv4.address": "192.168.101.1"

{{ ens160['ipv4'] }}
## 'ens160['ipv4']:{ "address": "192.168.101.1",
## "broadcast": "192.168.101.255", "netmask": "255.255.255.0" }

■ シーケンスの参照
シーケンスは、シーケンス番号を利用して値にアクセスする。シーケンス番号は0から始まり、シーケンス定義順に、1つずつ
番号が増加していく。また、マッピング同様にネストしたシーケンスにアクセスする場合は、「.」または「[]」でアクセスできる。
ただし、ネストした場合も、シーケンス番号でアクセスする必要がある。

・シーケンスの参照例
vars:
  local_users:
    -
      - user02
      - user03
    - ## リストが代入されている
      - user11

{{ local_users.0.1 }}
## "local_users0.1": "user03"

{{ local_users[0][1] }}
## "local_users[0][1]": "user03"

{{ local_users[1] }}
## "local_users[1]": ["user11"]

■ スカラーの参照
データ型の文字列や、真偽値も変数としてアクセスできる。文字列に関しては、先頭からの番号を入れることにより、
番号に応じた文字列を取得する。たとえば、「variable[0:5]」とすると先頭から、5文字目までを取得できる。

・スカラーの参照例
vars:
  title: "Ansible Practical Book"
  title_option: True

{{ title[0:7] }}
## "title[0:7]": "Ansible"

{{ title_option }}
## "title_option": true